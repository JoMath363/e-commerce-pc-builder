generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
}

model Category {
  id              String           @id @default(uuid())
  name            String
  products        Product[]
  buildComponents BuildComponent[]
}

model Product {
  id              String           @id @default(uuid())
  name            String
  description     String
  price           Decimal          @db.Decimal(10, 2)
  stock           Int
  imageUrl        String
  specs           Json
  createdAt       DateTime         @default(now())
  categoryId      String

  category        Category         @relation(fields: [categoryId], references: [id])
  orderItems      OrderItem[]
  buildComponents BuildComponent[]
  cartItems       CartItem[]
}

model User {
  id           String    @id @default(uuid())
  email        String    @unique
  name         String
  passwordHash String
  isAdmin      Boolean   @default(false)
  createdAt    DateTime  @default(now())

  address      Address?
  cart         Cart?
  cards        Card[]
  orders       Order[]
  builds       Build[]
}

model Address {
  id           String   @id @default(uuid())
  street       String
  number       String
  complement   String?
  neighborhood String
  city         String
  state        String
  postalCode   String
  country      String

  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id])
}

model Cart {
  id       String      @id @default(uuid())
  userId   String      @unique
  user     User        @relation(fields: [userId], references: [id])
  items    CartItem[]
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  quantity  Int      @default(1)

  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Card {
  id        String   @id @default(uuid())
  brand     String
  last4     String
  expiry    String
  token     String

  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Order {
  id        String       @id @default(uuid())
  userId    String
  status    OrderStatus  @default(PENDING)
  total     Decimal      @db.Decimal(10, 2)
  createdAt DateTime     @default(now())
  items     OrderItem[]

  user      User         @relation(fields: [userId], references: [id])
}

model OrderItem {
  id         String   @id @default(uuid())
  orderId    String
  productId  String
  quantity   Int
  unitPrice  Decimal  @db.Decimal(10, 2)

  order      Order    @relation(fields: [orderId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
}

model Build {
  id          String   @id @default(uuid())
  userId      String
  name        String
  totalPrice  Decimal  @db.Decimal(10, 2)
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])
  components  BuildComponent[]
}

model BuildComponent {
  id         String   @id @default(uuid())
  buildId    String
  productId  String
  categoryId String

  build      Build    @relation(fields: [buildId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])
}
